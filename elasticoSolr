#!/usr/bin/env ruby
# for Emacs, -*- mode: ruby -*- 

=begin

---- TODO x Solr -----

-] parameter to select the search to be done with Solr 
-] adapt MAN page 
-] re-read all and adapt comment: from Elasticsearch to Solr.

-] define the ".elastico" file for configuration
   e.g. default, hostname, port, query, time interval, result number etc. 

--- DONE SOLR -----------
-] improved call of less, added parameters (valid for FreeBSD and Linux)
-] fix the highlith 
-] output, to redefine 
-] call Solrt instead of Elasticsearch 
-] 'cmd' template var to be modified 
-] time is to be represented in Zulu time instead of milliseconds 


---- DONE ------
-] possibility of sorting results per log date [-s]
-] possibility of augmenting the search results [-l] 
-] possibility of restricting the date for the search [-d]
-] manual page in HTML, for easy print => nope, impemented "$> man elastico"
-] transform the "-" character to and " AND "

=end 


require 'json'
require 'date'
require 'tempfile'
# 
# require 'pry'

# -] If we put "elastico" output in a pipe and the pipe gets closed 
#    this prevents ugly error messages and give the same typical behaviour
#    of unix shell programs, as "cat". 
#    see here for details: http://tinyurl.com/y3ehavge
Signal.trap("SIGPIPE", "SYSTEM_DEFAULT") 

# -] Example of Lucene Query syntax to Elasticsearch CURL 
# 
# curl -XGET 'http://psmetric04:9200/lclslogs/_search?pretty=true' -H 'Content-Type: application/json' -d '{"query": { "query_string": { "default_field":"src", "query":"psmetric01"     }      }     }'

# ==========================================================
# Global variables determined with defaul values 
# that can be modified by command line parameters.
# =========================================================
#
# -] Upper limit to the number of output lines required. 
#    This value is overriddend if the parameter "-t" is set.
# -] DEFAULT_LIMIT is useful because it is a way to discover if the user
#    changed $LIMIT from a command line parameter. 
# -] Limit by time is the number of lines to 
# 
$LIMIT = 200            # previously was 20 
$LIMIT_DEFAULT = 200    # previously was 20 
$LIMIT_BY_TIME = nil
$LIMIT_IN_TIME_AND_SIZE = nil 
#
# If true values are returned sorted by date, if false
# the lines are returned by Elasticsearch 'relevance' sort.
#
$SORTED = true
# 
# 
$HIGHLIGHT = false
# 
# If this variable is set to 'true' then the variable $MYDEBUG_VALS 
# is printed in output. MYDEBUG_VALS contains various intermediate 
# results of interest.
#  
$MYDEBUG = false 
$MYDEBUG_VALS = {}
#
# For filtering according to date 
# Selecte all values in interval [$DATE0, $DATE1]
# The two values are in milliseconds. "$TIME_FILTER" 
# is true iff the time window has been specified on the command line.
$TIME_FILTER = false;
# By default search stuff starting from 48 hours ago, value to put in milliseconds.  
$DATE0 = ((Time.now.to_i)*1000) - (48 * 60 * 60 * 1_000)
# checked considtente with "date" :
# $> ruby -e 'puts "unix: #{`date "+%s"`}"; puts "ruby: #{Time.now.to_i} " '
$DATE1 = ((Time.now.to_i)*1000)

# =========================================================


# -] Make a string bold for the terminal 
def bolden(str)
  out = "\033[1m" + str + "\033[0m"
end

# -] replace blocks <em> ... </em> with Bash escape code
#    for bold.
def emphasis(str)
  out = str.gsub /<em>(.*?)<\/em>/, "\033\[1m\\1\033\[0m"
end

# TODO 
# modify 
# The sistem know the correct timezone, if PDF or PST 
# $> date '+%Z' => PST  o PDT 
# $> date '+%:z' => -08:00 o -07:00
def dateTimeToPST(dateTime)
  d = dateTime
  # this can contain "-08:00" or "-07:00" if we are in San Francisco ! 
  timeZoneDelta = `date '+%:z'`
  # if the timezone is already "-08:00" do nothing
  # return d if d.zone == "-08:00" 
  out = DateTime.new(d.year, d.month, d.day, d.hour, d.minute, d.second, timeZoneDelta )
end 


# -] function that analyzes the time string and return 
#    two DateTime objects representing the time window of interest.
# 
# IN: 'timeStr' : can be something like:
#      "2d"
#      "5h" 
#      "10m"    
#      "2018-dec-06-10:30__+2d"
#      "2018-dec-06-10:30__2018-dec-08"
#      "06-dec__15-dec"
#      .... 
# OUT: [dateA, dateB] 
#      date[A|B] are DateTime objects, they are not ordered, dateA can be larger than dateB
# 
def workOnTimeString(timeStr) 
  str = timeStr.dup 
  # timeStr e' del tipo: 1h, 5d, etc. 
  if  (m = str.match /^(?<val>\d+)(?<unit>[mhd])$/) then 
    val = m['val'].to_i
    seconds = {'m' => 60, 'h' => 60*60, 'd' => 60*60*24}
    # tempo corrente come epoch in secondi 
    # 
    rhsTime = DateTime.now
    lhsTime = rhsTime.to_time.to_i - (m['val'].to_i * seconds[m['unit']])
    lhsTime = lhsTime + DateTime.now.to_time.utc_offset
    lhsTime = DateTime.strptime(lhsTime.to_s, "%s")
    # 
  elsif (m = str.match /^(?<lhs>.*)__(?<rhs>.*)$/) then
    lhs = m['lhs'].dup.strip
    rhs = m['rhs'].dup.strip
    # puts "lhs: #{lhs}"
    # puts "rhs: #{rhs}"
    # 
    # lhs is always a point in time, that can be expressed as 
    # 2018-dec-06, dec-06, 06-10:30:31, 05-10:30
    # if YYY is not set is the current year 
    # if MM is not set is the current month
    # if SS is not set is zero 
    # if HH:MM is not set it is 00:00 (the first minute of the day)
    begin 
    lhsTime = nil
    # full date : 2018-dec-06-10:30
    if lhs.match /^\d{4}-\w{3}-\d{1,2}-\d{1,2}:\d{1,2}$/ then 
      lhsTime = DateTime.strptime(lhs, '%Y-%b-%d-%H:%M')
    # no year : dec-06-10:30 
    elsif lhs.match /^\w{3}-\d{1,2}-\d{1,2}:\d{1,2}$/ then 
      lhsTime = DateTime.strptime(lhs, '%b-%d-%H:%M')
    # no time : 2018-dec-06 
    elsif lhs.match /^\d{4}-\w{3}-\d{1,2}$/ then 
      lhsTime = DateTime.strptime(lhs, '%Y-%b-%d')
    # no year, no time : dec-06
    elsif lhs.match /^\w{3}-\d{1,2}$/ then 
      lhsTime = DateTime.strptime(lhs, '%b-%d')
    # only time : 15:30
    elsif lhs.match /^\d{1,2}:\d{1,2}$/ then 
      lhsTime = DateTime.strptime(lhs, '%H:%M')
    else
      STDERR.puts "Error, time format not recognized."
      exit(1)
    end
    # puts "lhsTime: #{lhsTime}"
    rescue => ex 
      STDERR.puts "Exception in parsing dates, check e.g. month names."
      exit(3)
    end

    # 
    # rhs can be a point in time, or a delta respect to lhs time.
    # 
    # if rhs is a delta it a can be: e.g. +1d, 5h, 20h, -12d ... 
    # 
    begin 
    rhsTime = nil 
    if (m = rhs.match(/^(?<sign>[+-])(?<val>\d+)(?<unit>[mhd])$/)) then
      seconds = {'m' => 60, 'h' => 60*60, 'd' => 60*60*24}
      if m['sign'] == '+' then 
        # binding.pry
        rhsTime = lhsTime.to_time.to_i + (m['val'].to_i * seconds[m['unit']])
        rhsTime = DateTime.strptime(rhsTime.to_s, "%s")
      else
        rhsTime = lhsTime.to_time.to_i - (m['val'].to_i * seconds[m['unit']])        
        rhsTime = DateTime.strptime(rhsTime.to_s, "%s")
      end
    # 
    # Now we see the case in which rhs if fully described 
    # complete: 2018-dec-06-10:31
    elsif rhs.match /^\d{4}-\w{3}-\d{1,2}-\d{1,2}:\d{1,2}$/ then 
      rhsTime = DateTime.strptime(rhs, '%Y-%b-%d-%H:%M')
    # no year : dec-06-10:30 
    elsif rhs.match /^\w{3}-\d{1,2}-\d{1,2}:\d{1,2}$/ then 
      rhsTime = DateTime.strptime(rhs, '%b-%d-%H:%M')
    # no time : 2018-dec-06 
    # in this case the time is the last minute of the day.
    elsif rhs.match /^\d{4}-\w{3}-\d{1,2}$/ then 
      tmp = DateTime.strptime(rhs, '%Y-%b-%d')
      rhsTime = DateTime.new(tmp.year, tmp.month, tmp.day, 23, 59, 59)
    # no year, no time : dec-06
    elsif rhs.match /^\w{3}-\d{1,2}$/ then 
      tmp = DateTime.strptime(rhs, '%b-%d')
      rhsTime = DateTime.new(tmp.year, tmp.month, tmp.day, 23, 59, 59)
    # only time : 15:30
    elsif rhs.match /^\d{1,2}:\d{1,2}$/ then 
      rhsTime = DateTime.strptime(rhs, '%H:%M')
    # 
    # Finally the case in which 'rhs' has not a recognizable format 
    else 
      STDERR.puts "Error, time format not recognized."
      exit(1) 
    end
    rescue => ex 
      STDERR.puts "Exception in parsing dates, check e.g. month names."
      exit(3)
    end
    # puts "rhsTime: #{rhsTime}"
    # exit (2)
  else
    STDERR.puts "Error, the time string '#{timeStr}' for parameter '-t' has an unknown format."
    exit(1);
  end
  # 
  # Return the two time limits. The first time is always before (in time) respect to the second one.
  # 
  lhsTime = dateTimeToPST(lhsTime)
  rhsTime = dateTimeToPST(rhsTime)
  if lhsTime == rhsTime then 
    STDERR.puts "Error. The time interval is empty, the search will be empty."
    exit(1)
  elsif lhsTime < rhsTime then
    out = [lhsTime, rhsTime]
    $MYDEBUG_VALS['lhsTime'] = lhsTime;
    $MYDEBUG_VALS['rhsTime'] = rhsTime;
  else
    out = [rhsTime, lhsTime]
    $MYDEBUG_VALS['lhsTime'] = rhsTime;
    $MYDEBUG_VALS['rhsTime'] = lhsTime;
  end
  out
end


# -] If there are not arguments print error message and quit
#
if ARGV.length == 0 then
  STDERR.puts "Error, this program requires at least one argument. "
  STDERR.puts "See the manual page with $> man elastico ."
  exit(1)
end 

# -] If "-h" is first argument and there is no other argument the suggest to open the manpage
#
if (ARGV.length <= 1) and (ARGV[0] == "-h") then 
  STDERR.puts "See the manual page with $> man elastico."
  exit(1)
end 

# -] If there is parameter "-l" but there is not parameter "-t"
#    then we must force the start of the logs from the beginning 
#    of time, we can not start from 48 h ago, to save time. 
if ( ARGV.include?("-l") and 
     (not ARGV.include?("-t")) ) then 
  $DATE0 = 0;
end 


# -] Parameters consistency check.
#    Parameter "-t" and "-l" step each other feet, so when they 
#    both present there are a lot of special conditions.
# 
if ( ARGV.include?("-t") and 
     ARGV.include?("-l") ) then 
  $LIMIT_IN_TIME_AND_SIZE = true 
end 

# -] Parametro "-d" 
#    per l'attivazione dei messaggi di debug
if ARGV.include?("-d") then 
  $MYDEBUG = true;
end 


# -] get parameters values and set constants 
# 
(0..(ARGV.length-2)).each do |idx|
  par = ARGV[idx]
  if par == "-S" then 
    $SORTED = false;
  elsif par == "-h" then 
    $HIGHLIGHT = true
  elsif par == "-H" then 
    $HIGHLIGHT = false
  #
  # "-l" : limit number of results 
  elsif par == "-l" then
    if ARGV[idx+1] == nil then 
      STDERR.puts "Error, an argument is needed after parameter '-l'."
      exit(1)
    end
    val = ARGV[idx+1]
    if (not val.match /\d+/) then 
      STDERR.puts "Error, argument of '-l' is required to be a positive integer."
      exit(1)
    end
    if (val.to_i > 10_000) then 
      STDERR.puts "Error, at the moment the maxium number of lines retrivable is 10_000."
      exit(1)
    end
    $LIMIT = ARGV[idx+1].to_i
  # 
  # "-t" : time window for selected results 
  elsif par == "-t" then 
    if ARGV[idx+1] == nil then 
      STDERR.puts "Error, an argument is needed after parameter '-t'."
      exit(1)      
    end
    # get the DateTime objects representing the time interval of interest
    dt0, dt1 = workOnTimeString(ARGV[idx+1])
    # convert the tims in milisseconds Epochs and set the globa variables 
    $TIME_FILTER = true;
    $DATE0 = (dt0.to_time.to_i * 1_000)
    $DATE1 = (dt1.to_time.to_i * 1_000)    
    # exit(1);
  end  
end 

# utility function, transforms a date in Epoch milliseconds format 
# to Zulu time, that is, a string like: "2019-12-08T04:49:18Z" .
def mSeccondsToZuluTimeString(msec) 
  d = DateTime.strptime((msec / 1000).to_s, "%s")
  out =  d.strftime("%Y-%m-%dT%H:%M:%S") + "Z"
  return out 
end  

# -] Lucene Query String is always the last argument in the shell command line 
# 
LQSTR = ARGV[-1].dup


# Accepts a Lucene query string "lucQstr", calls Elasticsearch via "curl" 
# and return the response as a string.
# We use "curl" to avoid the load of extra libraries, this may be changed.
def curlQuery(lucQstr="*", sorted: true, size: 20, highlight: false, count: false )

  if sorted then 
    sortedStr = ',"sort": {"date": {"order": "desc"}}  '
  else
    sortedStr = ""
  end

  if highlight then 
    # highlightStr = ',"highlight": { "fields": { "src": {} } }'
    highlightStr = '"hl": true, '
  else
    highlightStr = ""
  end

  # The operation type can be "_search", the get the results 
  # of "_count" to count the possible results 
  opType = "_search"
  if count then 
    opType = "_count"
    sortedStr = ""
    highlightStr = ""
  else
    opType = "_search?size=#{size}"
  end

  # The command include newlines and extra-spaces which are extremely useful
  # for readability, but then they must be removed.
  # -s : silent mode, does not show the progress bar 
  # http://psmetric04:9200/
  # cmd = %Q[ curl -s -XGET 'http://localhost:19200/lclslogs/#{opType}' 
  #                -H 'Content-Type: application/json' 
  #                -d '{ "query": { 
  #                       "bool": { 
  #                         "must": { 
  #                           "query_string": { 
  #                                     "default_field" : "src", 
  #                                     "query"         : "#{lucQstr}" 
  #                            }
  #                          }, 
  #                          "filter": { 
  #                             "range": { 
  #                                "date": { 
  #                                    "gt" : "#{$DATE0}", 
  #                                    "lt" : "#{$DATE1}" 
  #                                } 
  #                             }
  #                          }
  #                        } 
  #                       }
  #                      #{sortedStr}
  #                      #{highlightStr}
  #                    } ' ]

  # 'review #optipe 
  cmd = %Q[ curl -s -X POST -H 'Content-Type: application/json' --data-binary '{
                   params: { 
                       "fq": "date:[#{mSeccondsToZuluTimeString($DATE0)} TO #{mSeccondsToZuluTimeString($DATE1)}]",
                       "fl": "src",
                       "q" : "#{lucQstr}",
                       "rows": "#{$LIMIT}",  
                       "sort":"date desc",
                       #{highlightStr}
                       "df": "src"
                           }
                     }' 'http://localhost:18983/solr/lclsLogs/select'  ]


  # Store the query for debug purposes 
  if count == true then 
    $MYDEBUG_VALS['counterQuery'] = cmd.dup;
  else 
    $MYDEBUG_VALS['query'] = cmd.dup;
  end

  # Remove newlines 
  cmd.gsub! /\n/, " ";
  # Remove extra spaces 
  cmd.gsub! /\s+/, " ";

  # puts "DBG> #{cmd}" 
  out = `#{cmd}`
  # puts "DBG> #{out}" 
  out 
end

# The "dash" char is creating a lot of issues in our queries.
# our machines have often names like "foo-bar-baz". But "-" has a very
# special meaning in Lucene syntax and it is not easy to eascape while 
# writing the query from the shell, because the same escape charater is escape
# in many layers, from the shell to Lucene.
# 
# The solution we adopt is the following:
# 1] all multiple dashes are transformed to a single dash
# 2] The string in splitted in words, slit chracters are whitespaces.
# 3] if a word contains one or more "-" then 
#    it is split in subwords, the split character is "-"
#    the subword are merged as foollows:
#    [sub1, sub2, sub3]
#    (sub1 AND sub2 AND sub3) AND 
# 
# Example:  
#    manageDashChat("foo-bar NOT hey") ==> "(foo AND bar) NOT hey"  
# 
def manageDashChar(str) 
  # if there is no dash character in 'str' then do nothing, just return 'str'.
  return str if (not str.match /\-/ )
  # duplicate the stringa 
  str2 = str.dup
  # replace multiple near dashes with single dash.
  str2.gsub! /\-+/, '-'
  # split sentence in words, separated by whitespaces 
  words = str2.split /\s/
  out = ""
  # for each word ... 
  words.each do |w|
    if w.match /-/ then 
      subWords = w.split /-/
      newBlock = "("
      subWords.each do |sw|
        if newBlock == "(" then 
          newBlock = newBlock + sw
        else
          newBlock = newBlock + " AND " + sw
        end
      end
      newBlock = newBlock + ")"
      out = out + newBlock
    else
      out = out + " " + w + " "
    end
  end
  # replace multiple spaces with a single space
  out.gsub! /\s+/, ' '
  # remove white spaces at the end 
  return out.strip 
end 


# -] Buffer to contain all lines that will be printed 
lineBuffer = []

# -] If the query contains dash character, than make appropriate subsitutions
LQSTR2 = manageDashChar(LQSTR)


# -] If the search is by date get the number of results before
#    actually get them.     
#    The result is something similar to this:
#    {"count":19,"_shards":{"total":5,"successful":5,"skipped":0,"failed":0}}
# 
# -] "-l" will override "-t", always. 
#    Remember that "-l" control $LIMITS, but $LIMITS is defined by default as 20.
#    topmost region of the code. 
# 
# -] If "totalResultsByTime" is greater than $LIMITS (-l) then 
#    $LIMITS will not be changed, and $LIMITS was set to a value different from
#    the default, that is 20 than $LIMITS will prevail. 
# 
# -] If "totalResultsByTime" is greater than 10_000 then 
#    
# 
if $TIME_FILTER == true then 
  tmp = curlQuery( "* AND ( #{LQSTR2} )", count: true)
  totalResultsByTime = JSON.parse(tmp)["count"].to_i
  # to transporta this value at the end of the script and take decisions 
  # on the messages to show.
  $LIMIT_BY_TIME = totalResultsByTime
  # puts "Total documents to retrive: #{totalResultsByTime}."
  $MYDEBUG_VALS['counterQueryResult'] = tmp
  $MYDEBUG_VALS['numDocPerTimeWin'] = totalResultsByTime
  if ($LIMIT_BY_TIME >= 10_000) then 
    # -] since $LIMIT_BY_TIME is not a good value then $LIMIT is USED 
    #    so $LIMIT is not modified.
    nil
    # STDERR.puts "Error, the number of loglines to get would be #{totalResultsByTime}."
    # STDERR.puts "Please refine your search criteria, the maximum number of lines allowed in output is 10_000."
    # exit(1)
  else 
    # if $LIMIT_BY_TIME is a good value than it prevails over $LIMIT, 
    # but if $LIMIT has been given by the user then $LIMIT will prevail.
    if ($LIMIT == $LIMIT_DEFAULT) then 
      $LIMIT = $LIMIT_BY_TIME
    else
      # if $LIMIT != $LIMIT_DEFAULT it means that the user has specified its value
      # on the command line. In this case $LIMIT will prevail over the time.
      nil 
    end
  end 
end

# -] Make the query to Elasticsearch and store all results 
#    in the buffer "lineBuffer".
# 
tmp = curlQuery( "* AND ( #{LQSTR2} )", size: $LIMIT, 
                 sorted: $SORTED, highlight: $HIGHLIGHT, count: false)


# DEBUG : print the output stuff and quit
# puts tmp 
# exit(1)

if $HIGHLIGHT then
  tmp = JSON.parse(tmp)['highlighting']
  if tmp.nil? then 
    lineBuffer = [] 
  else 
    tmp.values.each do |el|
      lineBuffer.push( el['src'])
    end
  end
else
  JSON.parse(tmp)['response']['docs'].each do |el|
    lineBuffer.push( el['src'] )
  end
end; nil 

# puts lineBuffer
# exit(1)


# ====================================================================================
# ====== output management ===========================================================
# ====================================================================================

# case 1] $> elastico
# In this case we want the output to be stored in a temporary file 
# and to be shown in 'less' pager. 

# case 2\ $> elastico | fooCommand 
# In this case we want the output simply to be sent to STDOUT because 
# the user wants to perform postprocessing.

if (STDOUT.tty?) then 
  # if we are in tty (STOUDT is not a tty) then:
  f = Tempfile.new("elasticoOut","/tmp")
  # -] Printer all lines in "lineBuffer".
  lineBuffer.each do |l|
    next if l.nil?
    if $HIGHLIGHT then 
      f.puts emphasis(l[0])
    else
      f.puts l
    end
  end 
  f.close
  if (f.size == 0) then 
    STDERR.puts "No log match your search criteria. Try to make the search less specific or increase the time window (with -t)."
    nil
  else
    # -r : "raw", to display the sequences to stress some characters in the shell 
    # -f : force display of whatever file we say, ignore the binariness and don't complain
    # -F : "fit", if output fits one page quit less. 
    system("less -f -F -r #{f.path}")
  end 
  f.unlink
else
  # -] if we are in a pipe (we are not in a tty) then :
  # -] Printer all lines in "lineBuffer".
  lineBuffer.reverse.each do |l|
    next if l.nil?
    if $HIGHLIGHT then 
      puts emphasis(l[0])
    else
      puts l
    end
  end 
end 

# =====================================================================================

# -] Print informative message if some automatic selections were made on the 
#    data to display.

if ($LIMIT_IN_TIME_AND_SIZE == true) then 
  STDERR.puts "=== WARNING === Parameters '-t' and '-l' are not independent, one will prevail. "
end 

if (($LIMIT_BY_TIME != nil) and 
    ($LIMIT_BY_TIME > 10_000) and 
    ($LIMIT == $LIMIT_DEFAULT)) then  
     STDERR.puts "=== WARNING === Matching log-lines: #{$LIMIT_BY_TIME}, exceeding 10_000, cut to default: #{$LIMIT_DEFAULT}. " 
end 

if (($LIMIT_IN_TIME_AND_SIZE != nil) and 
    ($LIMIT_BY_TIME >= $LIMIT)) then  
     STDERR.puts "=== WARNING === logline limit implied by '-t': #{$LIMIT_BY_TIME} exceeds limit imposed by '-l': #{$LIMIT}. => '-l' prevails. " 
end 

if (($LIMIT_IN_TIME_AND_SIZE != nil) and 
    ($LIMIT_BY_TIME < $LIMIT)) then  
     STDERR.puts "=== WARNING === logline limit implied by '-t': #{$LIMIT_BY_TIME} does not exceed limit imposed by '-l': #{$LIMIT}. => '-t' is honoured. " 
end 



# =====================================================================================


# -] Print to STDERR debug informations if parameter "-d" is in ARGV.
#
if ($MYDEBUG == true) then 

  STDERR.puts <<EOD

  ========= Debug Informations ========================================================
  -] Limit the number of docuements to: $LIMIT 
     => #{$LIMIT}

  -] Command line arguments ARGV
     => #{ARGV}

  -] left side of the time window selected (lhs)
     => #{$MYDEBUG_VALS['lhsTime']}

  -] right side of the time window selected (rhs)
     => #{$MYDEBUG_VALS['rhsTime']}

  -] Epoch values in millisec sent to Elasticsearch time range filter window [$DATE0, $DATE1]
     => [ #{$DATE0}, #{$DATE1} ]

  -] Expolorative query for Elastic to count results per time window (if specified parameter '-t')
     => #{$MYDEBUG_VALS['counterQuery']}

  -] Explorative query result
     => #{$MYDEBUG_VALS['counterQueryResult']}

  -] Curl query for Elastic, to get results
     => #{$MYDEBUG_VALS['query']}

  ====================================================================================

EOD
end 






